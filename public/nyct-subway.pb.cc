// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nyct-subway.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TripReplacementPeriod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripReplacementPeriod_reflection_ = NULL;
const ::google::protobuf::Descriptor* NyctFeedHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NyctFeedHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* NyctTripDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NyctTripDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NyctTripDescriptor_Direction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NyctStopTimeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NyctStopTimeUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nyct_2dsubway_2eproto() {
  protobuf_AddDesc_nyct_2dsubway_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nyct-subway.proto");
  GOOGLE_CHECK(file != NULL);
  TripReplacementPeriod_descriptor_ = file->message_type(0);
  static const int TripReplacementPeriod_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripReplacementPeriod, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripReplacementPeriod, replacement_period_),
  };
  TripReplacementPeriod_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TripReplacementPeriod_descriptor_,
      TripReplacementPeriod::default_instance_,
      TripReplacementPeriod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripReplacementPeriod, _has_bits_[0]),
      -1,
      -1,
      sizeof(TripReplacementPeriod),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripReplacementPeriod, _internal_metadata_),
      -1);
  NyctFeedHeader_descriptor_ = file->message_type(1);
  static const int NyctFeedHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctFeedHeader, nyct_subway_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctFeedHeader, trip_replacement_period_),
  };
  NyctFeedHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NyctFeedHeader_descriptor_,
      NyctFeedHeader::default_instance_,
      NyctFeedHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctFeedHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(NyctFeedHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctFeedHeader, _internal_metadata_),
      -1);
  NyctTripDescriptor_descriptor_ = file->message_type(2);
  static const int NyctTripDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctTripDescriptor, train_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctTripDescriptor, is_assigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctTripDescriptor, direction_),
  };
  NyctTripDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NyctTripDescriptor_descriptor_,
      NyctTripDescriptor::default_instance_,
      NyctTripDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctTripDescriptor, _has_bits_[0]),
      -1,
      -1,
      sizeof(NyctTripDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctTripDescriptor, _internal_metadata_),
      -1);
  NyctTripDescriptor_Direction_descriptor_ = NyctTripDescriptor_descriptor_->enum_type(0);
  NyctStopTimeUpdate_descriptor_ = file->message_type(3);
  static const int NyctStopTimeUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctStopTimeUpdate, scheduled_track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctStopTimeUpdate, actual_track_),
  };
  NyctStopTimeUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NyctStopTimeUpdate_descriptor_,
      NyctStopTimeUpdate::default_instance_,
      NyctStopTimeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctStopTimeUpdate, _has_bits_[0]),
      -1,
      -1,
      sizeof(NyctStopTimeUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NyctStopTimeUpdate, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nyct_2dsubway_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TripReplacementPeriod_descriptor_, &TripReplacementPeriod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NyctFeedHeader_descriptor_, &NyctFeedHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NyctTripDescriptor_descriptor_, &NyctTripDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NyctStopTimeUpdate_descriptor_, &NyctStopTimeUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nyct_2dsubway_2eproto() {
  delete TripReplacementPeriod::default_instance_;
  delete TripReplacementPeriod_reflection_;
  delete NyctFeedHeader::default_instance_;
  delete NyctFeedHeader_reflection_;
  delete NyctTripDescriptor::default_instance_;
  delete NyctTripDescriptor_reflection_;
  delete NyctStopTimeUpdate::default_instance_;
  delete NyctStopTimeUpdate_reflection_;
}

void protobuf_AddDesc_nyct_2dsubway_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transit_realtime::protobuf_AddDesc_gtfs_2drealtime_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021nyct-subway.proto\032\023gtfs-realtime.proto"
    "\"b\n\025TripReplacementPeriod\022\020\n\010route_id\030\001 "
    "\001(\t\0227\n\022replacement_period\030\002 \001(\0132\033.transi"
    "t_realtime.TimeRange\"f\n\016NyctFeedHeader\022\033"
    "\n\023nyct_subway_version\030\001 \002(\t\0227\n\027trip_repl"
    "acement_period\030\002 \003(\0132\026.TripReplacementPe"
    "riod\"\244\001\n\022NyctTripDescriptor\022\020\n\010train_id\030"
    "\001 \001(\t\022\023\n\013is_assigned\030\002 \001(\010\0220\n\tdirection\030"
    "\003 \001(\0162\035.NyctTripDescriptor.Direction\"5\n\t"
    "Direction\022\t\n\005NORTH\020\001\022\010\n\004EAST\020\002\022\t\n\005SOUTH\020"
    "\003\022\010\n\004WEST\020\004\"C\n\022NyctStopTimeUpdate\022\027\n\017sch"
    "eduled_track\030\001 \001(\t\022\024\n\014actual_track\030\002 \001(\t"
    ":H\n\020nyct_feed_header\022\034.transit_realtime."
    "FeedHeader\030\351\007 \001(\0132\017.NyctFeedHeader:T\n\024ny"
    "ct_trip_descriptor\022 .transit_realtime.Tr"
    "ipDescriptor\030\351\007 \001(\0132\023.NyctTripDescriptor"
    ":`\n\025nyct_stop_time_update\022+.transit_real"
    "time.TripUpdate.StopTimeUpdate\030\351\007 \001(\0132\023."
    "NyctStopTimeUpdateB\035\n\033com.google.transit"
    ".realtime", 769);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nyct-subway.proto", &protobuf_RegisterTypes);
  TripReplacementPeriod::default_instance_ = new TripReplacementPeriod();
  NyctFeedHeader::default_instance_ = new NyctFeedHeader();
  NyctTripDescriptor::default_instance_ = new NyctTripDescriptor();
  NyctStopTimeUpdate::default_instance_ = new NyctStopTimeUpdate();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::transit_realtime::FeedHeader::default_instance(),
    1001, 11, false, false,
    &::NyctFeedHeader::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::transit_realtime::TripDescriptor::default_instance(),
    1001, 11, false, false,
    &::NyctTripDescriptor::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::transit_realtime::TripUpdate_StopTimeUpdate::default_instance(),
    1001, 11, false, false,
    &::NyctStopTimeUpdate::default_instance());
  TripReplacementPeriod::default_instance_->InitAsDefaultInstance();
  NyctFeedHeader::default_instance_->InitAsDefaultInstance();
  NyctTripDescriptor::default_instance_->InitAsDefaultInstance();
  NyctStopTimeUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nyct_2dsubway_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nyct_2dsubway_2eproto {
  StaticDescriptorInitializer_nyct_2dsubway_2eproto() {
    protobuf_AddDesc_nyct_2dsubway_2eproto();
  }
} static_descriptor_initializer_nyct_2dsubway_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int TripReplacementPeriod::kRouteIdFieldNumber;
const int TripReplacementPeriod::kReplacementPeriodFieldNumber;
#endif  // !_MSC_VER

TripReplacementPeriod::TripReplacementPeriod()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TripReplacementPeriod)
}

void TripReplacementPeriod::InitAsDefaultInstance() {
  replacement_period_ = const_cast< ::transit_realtime::TimeRange*>(&::transit_realtime::TimeRange::default_instance());
}

TripReplacementPeriod::TripReplacementPeriod(const TripReplacementPeriod& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TripReplacementPeriod)
}

void TripReplacementPeriod::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  route_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replacement_period_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripReplacementPeriod::~TripReplacementPeriod() {
  // @@protoc_insertion_point(destructor:TripReplacementPeriod)
  SharedDtor();
}

void TripReplacementPeriod::SharedDtor() {
  route_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete replacement_period_;
  }
}

void TripReplacementPeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripReplacementPeriod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripReplacementPeriod_descriptor_;
}

const TripReplacementPeriod& TripReplacementPeriod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nyct_2dsubway_2eproto();
  return *default_instance_;
}

TripReplacementPeriod* TripReplacementPeriod::default_instance_ = NULL;

TripReplacementPeriod* TripReplacementPeriod::New(::google::protobuf::Arena* arena) const {
  TripReplacementPeriod* n = new TripReplacementPeriod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripReplacementPeriod::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_route_id()) {
      route_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_replacement_period()) {
      if (replacement_period_ != NULL) replacement_period_->::transit_realtime::TimeRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TripReplacementPeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TripReplacementPeriod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string route_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->route_id().data(), this->route_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TripReplacementPeriod.route_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_replacement_period;
        break;
      }

      // optional .transit_realtime.TimeRange replacement_period = 2;
      case 2: {
        if (tag == 18) {
         parse_replacement_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replacement_period()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TripReplacementPeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TripReplacementPeriod)
  return false;
#undef DO_
}

void TripReplacementPeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TripReplacementPeriod)
  // optional string route_id = 1;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route_id().data(), this->route_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TripReplacementPeriod.route_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->route_id(), output);
  }

  // optional .transit_realtime.TimeRange replacement_period = 2;
  if (has_replacement_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->replacement_period_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TripReplacementPeriod)
}

::google::protobuf::uint8* TripReplacementPeriod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TripReplacementPeriod)
  // optional string route_id = 1;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route_id().data(), this->route_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TripReplacementPeriod.route_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->route_id(), target);
  }

  // optional .transit_realtime.TimeRange replacement_period = 2;
  if (has_replacement_period()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->replacement_period_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TripReplacementPeriod)
  return target;
}

int TripReplacementPeriod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string route_id = 1;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_id());
    }

    // optional .transit_realtime.TimeRange replacement_period = 2;
    if (has_replacement_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->replacement_period_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripReplacementPeriod::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TripReplacementPeriod* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TripReplacementPeriod>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripReplacementPeriod::MergeFrom(const TripReplacementPeriod& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_route_id()) {
      set_has_route_id();
      route_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_id_);
    }
    if (from.has_replacement_period()) {
      mutable_replacement_period()->::transit_realtime::TimeRange::MergeFrom(from.replacement_period());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TripReplacementPeriod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripReplacementPeriod::CopyFrom(const TripReplacementPeriod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripReplacementPeriod::IsInitialized() const {

  if (has_replacement_period()) {
    if (!this->replacement_period_->IsInitialized()) return false;
  }
  return true;
}

void TripReplacementPeriod::Swap(TripReplacementPeriod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripReplacementPeriod::InternalSwap(TripReplacementPeriod* other) {
  route_id_.Swap(&other->route_id_);
  std::swap(replacement_period_, other->replacement_period_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripReplacementPeriod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripReplacementPeriod_descriptor_;
  metadata.reflection = TripReplacementPeriod_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TripReplacementPeriod

// optional string route_id = 1;
bool TripReplacementPeriod::has_route_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TripReplacementPeriod::set_has_route_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TripReplacementPeriod::clear_has_route_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TripReplacementPeriod::clear_route_id() {
  route_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_route_id();
}
 const ::std::string& TripReplacementPeriod::route_id() const {
  // @@protoc_insertion_point(field_get:TripReplacementPeriod.route_id)
  return route_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TripReplacementPeriod::set_route_id(const ::std::string& value) {
  set_has_route_id();
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TripReplacementPeriod.route_id)
}
 void TripReplacementPeriod::set_route_id(const char* value) {
  set_has_route_id();
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TripReplacementPeriod.route_id)
}
 void TripReplacementPeriod::set_route_id(const char* value, size_t size) {
  set_has_route_id();
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TripReplacementPeriod.route_id)
}
 ::std::string* TripReplacementPeriod::mutable_route_id() {
  set_has_route_id();
  // @@protoc_insertion_point(field_mutable:TripReplacementPeriod.route_id)
  return route_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TripReplacementPeriod::release_route_id() {
  clear_has_route_id();
  return route_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TripReplacementPeriod::set_allocated_route_id(::std::string* route_id) {
  if (route_id != NULL) {
    set_has_route_id();
  } else {
    clear_has_route_id();
  }
  route_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_id);
  // @@protoc_insertion_point(field_set_allocated:TripReplacementPeriod.route_id)
}

// optional .transit_realtime.TimeRange replacement_period = 2;
bool TripReplacementPeriod::has_replacement_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TripReplacementPeriod::set_has_replacement_period() {
  _has_bits_[0] |= 0x00000002u;
}
void TripReplacementPeriod::clear_has_replacement_period() {
  _has_bits_[0] &= ~0x00000002u;
}
void TripReplacementPeriod::clear_replacement_period() {
  if (replacement_period_ != NULL) replacement_period_->::transit_realtime::TimeRange::Clear();
  clear_has_replacement_period();
}
 const ::transit_realtime::TimeRange& TripReplacementPeriod::replacement_period() const {
  // @@protoc_insertion_point(field_get:TripReplacementPeriod.replacement_period)
  return replacement_period_ != NULL ? *replacement_period_ : *default_instance_->replacement_period_;
}
 ::transit_realtime::TimeRange* TripReplacementPeriod::mutable_replacement_period() {
  set_has_replacement_period();
  if (replacement_period_ == NULL) {
    replacement_period_ = new ::transit_realtime::TimeRange;
  }
  // @@protoc_insertion_point(field_mutable:TripReplacementPeriod.replacement_period)
  return replacement_period_;
}
 ::transit_realtime::TimeRange* TripReplacementPeriod::release_replacement_period() {
  clear_has_replacement_period();
  ::transit_realtime::TimeRange* temp = replacement_period_;
  replacement_period_ = NULL;
  return temp;
}
 void TripReplacementPeriod::set_allocated_replacement_period(::transit_realtime::TimeRange* replacement_period) {
  delete replacement_period_;
  replacement_period_ = replacement_period;
  if (replacement_period) {
    set_has_replacement_period();
  } else {
    clear_has_replacement_period();
  }
  // @@protoc_insertion_point(field_set_allocated:TripReplacementPeriod.replacement_period)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NyctFeedHeader::kNyctSubwayVersionFieldNumber;
const int NyctFeedHeader::kTripReplacementPeriodFieldNumber;
#endif  // !_MSC_VER

NyctFeedHeader::NyctFeedHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NyctFeedHeader)
}

void NyctFeedHeader::InitAsDefaultInstance() {
}

NyctFeedHeader::NyctFeedHeader(const NyctFeedHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NyctFeedHeader)
}

void NyctFeedHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nyct_subway_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NyctFeedHeader::~NyctFeedHeader() {
  // @@protoc_insertion_point(destructor:NyctFeedHeader)
  SharedDtor();
}

void NyctFeedHeader::SharedDtor() {
  nyct_subway_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NyctFeedHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NyctFeedHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NyctFeedHeader_descriptor_;
}

const NyctFeedHeader& NyctFeedHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nyct_2dsubway_2eproto();
  return *default_instance_;
}

NyctFeedHeader* NyctFeedHeader::default_instance_ = NULL;

NyctFeedHeader* NyctFeedHeader::New(::google::protobuf::Arena* arena) const {
  NyctFeedHeader* n = new NyctFeedHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NyctFeedHeader::Clear() {
  if (has_nyct_subway_version()) {
    nyct_subway_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  trip_replacement_period_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NyctFeedHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NyctFeedHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nyct_subway_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nyct_subway_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nyct_subway_version().data(), this->nyct_subway_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NyctFeedHeader.nyct_subway_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trip_replacement_period;
        break;
      }

      // repeated .TripReplacementPeriod trip_replacement_period = 2;
      case 2: {
        if (tag == 18) {
         parse_trip_replacement_period:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trip_replacement_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trip_replacement_period()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_trip_replacement_period;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NyctFeedHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NyctFeedHeader)
  return false;
#undef DO_
}

void NyctFeedHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NyctFeedHeader)
  // required string nyct_subway_version = 1;
  if (has_nyct_subway_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nyct_subway_version().data(), this->nyct_subway_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctFeedHeader.nyct_subway_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nyct_subway_version(), output);
  }

  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  for (unsigned int i = 0, n = this->trip_replacement_period_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trip_replacement_period(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NyctFeedHeader)
}

::google::protobuf::uint8* NyctFeedHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NyctFeedHeader)
  // required string nyct_subway_version = 1;
  if (has_nyct_subway_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nyct_subway_version().data(), this->nyct_subway_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctFeedHeader.nyct_subway_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nyct_subway_version(), target);
  }

  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  for (unsigned int i = 0, n = this->trip_replacement_period_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trip_replacement_period(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NyctFeedHeader)
  return target;
}

int NyctFeedHeader::ByteSize() const {
  int total_size = 0;

  // required string nyct_subway_version = 1;
  if (has_nyct_subway_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nyct_subway_version());
  }
  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  total_size += 1 * this->trip_replacement_period_size();
  for (int i = 0; i < this->trip_replacement_period_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trip_replacement_period(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NyctFeedHeader::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NyctFeedHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NyctFeedHeader>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NyctFeedHeader::MergeFrom(const NyctFeedHeader& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  trip_replacement_period_.MergeFrom(from.trip_replacement_period_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nyct_subway_version()) {
      set_has_nyct_subway_version();
      nyct_subway_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nyct_subway_version_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NyctFeedHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NyctFeedHeader::CopyFrom(const NyctFeedHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctFeedHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->trip_replacement_period())) return false;
  return true;
}

void NyctFeedHeader::Swap(NyctFeedHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NyctFeedHeader::InternalSwap(NyctFeedHeader* other) {
  nyct_subway_version_.Swap(&other->nyct_subway_version_);
  trip_replacement_period_.UnsafeArenaSwap(&other->trip_replacement_period_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NyctFeedHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NyctFeedHeader_descriptor_;
  metadata.reflection = NyctFeedHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NyctFeedHeader

// required string nyct_subway_version = 1;
bool NyctFeedHeader::has_nyct_subway_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NyctFeedHeader::set_has_nyct_subway_version() {
  _has_bits_[0] |= 0x00000001u;
}
void NyctFeedHeader::clear_has_nyct_subway_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void NyctFeedHeader::clear_nyct_subway_version() {
  nyct_subway_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nyct_subway_version();
}
 const ::std::string& NyctFeedHeader::nyct_subway_version() const {
  // @@protoc_insertion_point(field_get:NyctFeedHeader.nyct_subway_version)
  return nyct_subway_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NyctFeedHeader::set_nyct_subway_version(const ::std::string& value) {
  set_has_nyct_subway_version();
  nyct_subway_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NyctFeedHeader.nyct_subway_version)
}
 void NyctFeedHeader::set_nyct_subway_version(const char* value) {
  set_has_nyct_subway_version();
  nyct_subway_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctFeedHeader.nyct_subway_version)
}
 void NyctFeedHeader::set_nyct_subway_version(const char* value, size_t size) {
  set_has_nyct_subway_version();
  nyct_subway_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctFeedHeader.nyct_subway_version)
}
 ::std::string* NyctFeedHeader::mutable_nyct_subway_version() {
  set_has_nyct_subway_version();
  // @@protoc_insertion_point(field_mutable:NyctFeedHeader.nyct_subway_version)
  return nyct_subway_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NyctFeedHeader::release_nyct_subway_version() {
  clear_has_nyct_subway_version();
  return nyct_subway_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NyctFeedHeader::set_allocated_nyct_subway_version(::std::string* nyct_subway_version) {
  if (nyct_subway_version != NULL) {
    set_has_nyct_subway_version();
  } else {
    clear_has_nyct_subway_version();
  }
  nyct_subway_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nyct_subway_version);
  // @@protoc_insertion_point(field_set_allocated:NyctFeedHeader.nyct_subway_version)
}

// repeated .TripReplacementPeriod trip_replacement_period = 2;
int NyctFeedHeader::trip_replacement_period_size() const {
  return trip_replacement_period_.size();
}
void NyctFeedHeader::clear_trip_replacement_period() {
  trip_replacement_period_.Clear();
}
 const ::TripReplacementPeriod& NyctFeedHeader::trip_replacement_period(int index) const {
  // @@protoc_insertion_point(field_get:NyctFeedHeader.trip_replacement_period)
  return trip_replacement_period_.Get(index);
}
 ::TripReplacementPeriod* NyctFeedHeader::mutable_trip_replacement_period(int index) {
  // @@protoc_insertion_point(field_mutable:NyctFeedHeader.trip_replacement_period)
  return trip_replacement_period_.Mutable(index);
}
 ::TripReplacementPeriod* NyctFeedHeader::add_trip_replacement_period() {
  // @@protoc_insertion_point(field_add:NyctFeedHeader.trip_replacement_period)
  return trip_replacement_period_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod >&
NyctFeedHeader::trip_replacement_period() const {
  // @@protoc_insertion_point(field_list:NyctFeedHeader.trip_replacement_period)
  return trip_replacement_period_;
}
 ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod >*
NyctFeedHeader::mutable_trip_replacement_period() {
  // @@protoc_insertion_point(field_mutable_list:NyctFeedHeader.trip_replacement_period)
  return &trip_replacement_period_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* NyctTripDescriptor_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NyctTripDescriptor_Direction_descriptor_;
}
bool NyctTripDescriptor_Direction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NyctTripDescriptor_Direction NyctTripDescriptor::NORTH;
const NyctTripDescriptor_Direction NyctTripDescriptor::EAST;
const NyctTripDescriptor_Direction NyctTripDescriptor::SOUTH;
const NyctTripDescriptor_Direction NyctTripDescriptor::WEST;
const NyctTripDescriptor_Direction NyctTripDescriptor::Direction_MIN;
const NyctTripDescriptor_Direction NyctTripDescriptor::Direction_MAX;
const int NyctTripDescriptor::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NyctTripDescriptor::kTrainIdFieldNumber;
const int NyctTripDescriptor::kIsAssignedFieldNumber;
const int NyctTripDescriptor::kDirectionFieldNumber;
#endif  // !_MSC_VER

NyctTripDescriptor::NyctTripDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NyctTripDescriptor)
}

void NyctTripDescriptor::InitAsDefaultInstance() {
}

NyctTripDescriptor::NyctTripDescriptor(const NyctTripDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NyctTripDescriptor)
}

void NyctTripDescriptor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  train_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_assigned_ = false;
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NyctTripDescriptor::~NyctTripDescriptor() {
  // @@protoc_insertion_point(destructor:NyctTripDescriptor)
  SharedDtor();
}

void NyctTripDescriptor::SharedDtor() {
  train_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NyctTripDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NyctTripDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NyctTripDescriptor_descriptor_;
}

const NyctTripDescriptor& NyctTripDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nyct_2dsubway_2eproto();
  return *default_instance_;
}

NyctTripDescriptor* NyctTripDescriptor::default_instance_ = NULL;

NyctTripDescriptor* NyctTripDescriptor::New(::google::protobuf::Arena* arena) const {
  NyctTripDescriptor* n = new NyctTripDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NyctTripDescriptor::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_train_id()) {
      train_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_assigned_ = false;
    direction_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NyctTripDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NyctTripDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_id().data(), this->train_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NyctTripDescriptor.train_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_assigned;
        break;
      }

      // optional bool is_assigned = 2;
      case 2: {
        if (tag == 16) {
         parse_is_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_assigned_)));
          set_has_is_assigned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // optional .NyctTripDescriptor.Direction direction = 3;
      case 3: {
        if (tag == 24) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NyctTripDescriptor_Direction_IsValid(value)) {
            set_direction(static_cast< ::NyctTripDescriptor_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NyctTripDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NyctTripDescriptor)
  return false;
#undef DO_
}

void NyctTripDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NyctTripDescriptor)
  // optional string train_id = 1;
  if (has_train_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_id().data(), this->train_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctTripDescriptor.train_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->train_id(), output);
  }

  // optional bool is_assigned = 2;
  if (has_is_assigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_assigned(), output);
  }

  // optional .NyctTripDescriptor.Direction direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NyctTripDescriptor)
}

::google::protobuf::uint8* NyctTripDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NyctTripDescriptor)
  // optional string train_id = 1;
  if (has_train_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_id().data(), this->train_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctTripDescriptor.train_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_id(), target);
  }

  // optional bool is_assigned = 2;
  if (has_is_assigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_assigned(), target);
  }

  // optional .NyctTripDescriptor.Direction direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NyctTripDescriptor)
  return target;
}

int NyctTripDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string train_id = 1;
    if (has_train_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_id());
    }

    // optional bool is_assigned = 2;
    if (has_is_assigned()) {
      total_size += 1 + 1;
    }

    // optional .NyctTripDescriptor.Direction direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NyctTripDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NyctTripDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NyctTripDescriptor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NyctTripDescriptor::MergeFrom(const NyctTripDescriptor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train_id()) {
      set_has_train_id();
      train_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_id_);
    }
    if (from.has_is_assigned()) {
      set_is_assigned(from.is_assigned());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NyctTripDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NyctTripDescriptor::CopyFrom(const NyctTripDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctTripDescriptor::IsInitialized() const {

  return true;
}

void NyctTripDescriptor::Swap(NyctTripDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NyctTripDescriptor::InternalSwap(NyctTripDescriptor* other) {
  train_id_.Swap(&other->train_id_);
  std::swap(is_assigned_, other->is_assigned_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NyctTripDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NyctTripDescriptor_descriptor_;
  metadata.reflection = NyctTripDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NyctTripDescriptor

// optional string train_id = 1;
bool NyctTripDescriptor::has_train_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NyctTripDescriptor::set_has_train_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NyctTripDescriptor::clear_has_train_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NyctTripDescriptor::clear_train_id() {
  train_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_id();
}
 const ::std::string& NyctTripDescriptor::train_id() const {
  // @@protoc_insertion_point(field_get:NyctTripDescriptor.train_id)
  return train_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NyctTripDescriptor::set_train_id(const ::std::string& value) {
  set_has_train_id();
  train_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NyctTripDescriptor.train_id)
}
 void NyctTripDescriptor::set_train_id(const char* value) {
  set_has_train_id();
  train_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctTripDescriptor.train_id)
}
 void NyctTripDescriptor::set_train_id(const char* value, size_t size) {
  set_has_train_id();
  train_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctTripDescriptor.train_id)
}
 ::std::string* NyctTripDescriptor::mutable_train_id() {
  set_has_train_id();
  // @@protoc_insertion_point(field_mutable:NyctTripDescriptor.train_id)
  return train_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NyctTripDescriptor::release_train_id() {
  clear_has_train_id();
  return train_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NyctTripDescriptor::set_allocated_train_id(::std::string* train_id) {
  if (train_id != NULL) {
    set_has_train_id();
  } else {
    clear_has_train_id();
  }
  train_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_id);
  // @@protoc_insertion_point(field_set_allocated:NyctTripDescriptor.train_id)
}

// optional bool is_assigned = 2;
bool NyctTripDescriptor::has_is_assigned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NyctTripDescriptor::set_has_is_assigned() {
  _has_bits_[0] |= 0x00000002u;
}
void NyctTripDescriptor::clear_has_is_assigned() {
  _has_bits_[0] &= ~0x00000002u;
}
void NyctTripDescriptor::clear_is_assigned() {
  is_assigned_ = false;
  clear_has_is_assigned();
}
 bool NyctTripDescriptor::is_assigned() const {
  // @@protoc_insertion_point(field_get:NyctTripDescriptor.is_assigned)
  return is_assigned_;
}
 void NyctTripDescriptor::set_is_assigned(bool value) {
  set_has_is_assigned();
  is_assigned_ = value;
  // @@protoc_insertion_point(field_set:NyctTripDescriptor.is_assigned)
}

// optional .NyctTripDescriptor.Direction direction = 3;
bool NyctTripDescriptor::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NyctTripDescriptor::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void NyctTripDescriptor::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void NyctTripDescriptor::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
 ::NyctTripDescriptor_Direction NyctTripDescriptor::direction() const {
  // @@protoc_insertion_point(field_get:NyctTripDescriptor.direction)
  return static_cast< ::NyctTripDescriptor_Direction >(direction_);
}
 void NyctTripDescriptor::set_direction(::NyctTripDescriptor_Direction value) {
  assert(::NyctTripDescriptor_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:NyctTripDescriptor.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NyctStopTimeUpdate::kScheduledTrackFieldNumber;
const int NyctStopTimeUpdate::kActualTrackFieldNumber;
#endif  // !_MSC_VER

NyctStopTimeUpdate::NyctStopTimeUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NyctStopTimeUpdate)
}

void NyctStopTimeUpdate::InitAsDefaultInstance() {
}

NyctStopTimeUpdate::NyctStopTimeUpdate(const NyctStopTimeUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NyctStopTimeUpdate)
}

void NyctStopTimeUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scheduled_track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actual_track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NyctStopTimeUpdate::~NyctStopTimeUpdate() {
  // @@protoc_insertion_point(destructor:NyctStopTimeUpdate)
  SharedDtor();
}

void NyctStopTimeUpdate::SharedDtor() {
  scheduled_track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actual_track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NyctStopTimeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NyctStopTimeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NyctStopTimeUpdate_descriptor_;
}

const NyctStopTimeUpdate& NyctStopTimeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nyct_2dsubway_2eproto();
  return *default_instance_;
}

NyctStopTimeUpdate* NyctStopTimeUpdate::default_instance_ = NULL;

NyctStopTimeUpdate* NyctStopTimeUpdate::New(::google::protobuf::Arena* arena) const {
  NyctStopTimeUpdate* n = new NyctStopTimeUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NyctStopTimeUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_scheduled_track()) {
      scheduled_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_actual_track()) {
      actual_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NyctStopTimeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NyctStopTimeUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scheduled_track = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheduled_track()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scheduled_track().data(), this->scheduled_track().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NyctStopTimeUpdate.scheduled_track");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_actual_track;
        break;
      }

      // optional string actual_track = 2;
      case 2: {
        if (tag == 18) {
         parse_actual_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actual_track()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actual_track().data(), this->actual_track().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NyctStopTimeUpdate.actual_track");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NyctStopTimeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NyctStopTimeUpdate)
  return false;
#undef DO_
}

void NyctStopTimeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NyctStopTimeUpdate)
  // optional string scheduled_track = 1;
  if (has_scheduled_track()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduled_track().data(), this->scheduled_track().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctStopTimeUpdate.scheduled_track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scheduled_track(), output);
  }

  // optional string actual_track = 2;
  if (has_actual_track()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actual_track().data(), this->actual_track().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctStopTimeUpdate.actual_track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->actual_track(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NyctStopTimeUpdate)
}

::google::protobuf::uint8* NyctStopTimeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NyctStopTimeUpdate)
  // optional string scheduled_track = 1;
  if (has_scheduled_track()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduled_track().data(), this->scheduled_track().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctStopTimeUpdate.scheduled_track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scheduled_track(), target);
  }

  // optional string actual_track = 2;
  if (has_actual_track()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actual_track().data(), this->actual_track().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctStopTimeUpdate.actual_track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->actual_track(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NyctStopTimeUpdate)
  return target;
}

int NyctStopTimeUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string scheduled_track = 1;
    if (has_scheduled_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scheduled_track());
    }

    // optional string actual_track = 2;
    if (has_actual_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actual_track());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NyctStopTimeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NyctStopTimeUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NyctStopTimeUpdate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NyctStopTimeUpdate::MergeFrom(const NyctStopTimeUpdate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scheduled_track()) {
      set_has_scheduled_track();
      scheduled_track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheduled_track_);
    }
    if (from.has_actual_track()) {
      set_has_actual_track();
      actual_track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actual_track_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NyctStopTimeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NyctStopTimeUpdate::CopyFrom(const NyctStopTimeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctStopTimeUpdate::IsInitialized() const {

  return true;
}

void NyctStopTimeUpdate::Swap(NyctStopTimeUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NyctStopTimeUpdate::InternalSwap(NyctStopTimeUpdate* other) {
  scheduled_track_.Swap(&other->scheduled_track_);
  actual_track_.Swap(&other->actual_track_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NyctStopTimeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NyctStopTimeUpdate_descriptor_;
  metadata.reflection = NyctStopTimeUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NyctStopTimeUpdate

// optional string scheduled_track = 1;
bool NyctStopTimeUpdate::has_scheduled_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NyctStopTimeUpdate::set_has_scheduled_track() {
  _has_bits_[0] |= 0x00000001u;
}
void NyctStopTimeUpdate::clear_has_scheduled_track() {
  _has_bits_[0] &= ~0x00000001u;
}
void NyctStopTimeUpdate::clear_scheduled_track() {
  scheduled_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scheduled_track();
}
 const ::std::string& NyctStopTimeUpdate::scheduled_track() const {
  // @@protoc_insertion_point(field_get:NyctStopTimeUpdate.scheduled_track)
  return scheduled_track_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NyctStopTimeUpdate::set_scheduled_track(const ::std::string& value) {
  set_has_scheduled_track();
  scheduled_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NyctStopTimeUpdate.scheduled_track)
}
 void NyctStopTimeUpdate::set_scheduled_track(const char* value) {
  set_has_scheduled_track();
  scheduled_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctStopTimeUpdate.scheduled_track)
}
 void NyctStopTimeUpdate::set_scheduled_track(const char* value, size_t size) {
  set_has_scheduled_track();
  scheduled_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctStopTimeUpdate.scheduled_track)
}
 ::std::string* NyctStopTimeUpdate::mutable_scheduled_track() {
  set_has_scheduled_track();
  // @@protoc_insertion_point(field_mutable:NyctStopTimeUpdate.scheduled_track)
  return scheduled_track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NyctStopTimeUpdate::release_scheduled_track() {
  clear_has_scheduled_track();
  return scheduled_track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NyctStopTimeUpdate::set_allocated_scheduled_track(::std::string* scheduled_track) {
  if (scheduled_track != NULL) {
    set_has_scheduled_track();
  } else {
    clear_has_scheduled_track();
  }
  scheduled_track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scheduled_track);
  // @@protoc_insertion_point(field_set_allocated:NyctStopTimeUpdate.scheduled_track)
}

// optional string actual_track = 2;
bool NyctStopTimeUpdate::has_actual_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NyctStopTimeUpdate::set_has_actual_track() {
  _has_bits_[0] |= 0x00000002u;
}
void NyctStopTimeUpdate::clear_has_actual_track() {
  _has_bits_[0] &= ~0x00000002u;
}
void NyctStopTimeUpdate::clear_actual_track() {
  actual_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_actual_track();
}
 const ::std::string& NyctStopTimeUpdate::actual_track() const {
  // @@protoc_insertion_point(field_get:NyctStopTimeUpdate.actual_track)
  return actual_track_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NyctStopTimeUpdate::set_actual_track(const ::std::string& value) {
  set_has_actual_track();
  actual_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NyctStopTimeUpdate.actual_track)
}
 void NyctStopTimeUpdate::set_actual_track(const char* value) {
  set_has_actual_track();
  actual_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctStopTimeUpdate.actual_track)
}
 void NyctStopTimeUpdate::set_actual_track(const char* value, size_t size) {
  set_has_actual_track();
  actual_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctStopTimeUpdate.actual_track)
}
 ::std::string* NyctStopTimeUpdate::mutable_actual_track() {
  set_has_actual_track();
  // @@protoc_insertion_point(field_mutable:NyctStopTimeUpdate.actual_track)
  return actual_track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NyctStopTimeUpdate::release_actual_track() {
  clear_has_actual_track();
  return actual_track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NyctStopTimeUpdate::set_allocated_actual_track(::std::string* actual_track) {
  if (actual_track != NULL) {
    set_has_actual_track();
  } else {
    clear_has_actual_track();
  }
  actual_track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actual_track);
  // @@protoc_insertion_point(field_set_allocated:NyctStopTimeUpdate.actual_track)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::FeedHeader,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctFeedHeader >, 11, false >
  nyct_feed_header(kNyctFeedHeaderFieldNumber, ::NyctFeedHeader::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::TripDescriptor,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctTripDescriptor >, 11, false >
  nyct_trip_descriptor(kNyctTripDescriptorFieldNumber, ::NyctTripDescriptor::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::TripUpdate_StopTimeUpdate,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctStopTimeUpdate >, 11, false >
  nyct_stop_time_update(kNyctStopTimeUpdateFieldNumber, ::NyctStopTimeUpdate::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
